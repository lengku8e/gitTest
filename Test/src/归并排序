背景介绍： 是创建在归并操作上的一种有效的排序算法，效率为O(n log n)。1945年由约翰・冯・诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。 ----- 来自 wikipedia 
算法规则： 像快速排序一样，由于归并排序也是分治算法，因此可使用分治思想：
1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列
2.设定两个指针，最初位置分别为两个已经排序序列的起始位置 
3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置 
4.重复步骤3直到某一指针到达序列尾 
5.将另一序列剩下的所有元素直接复制到合并序列尾

代码实现（Java版本）

public void mergeSort(int[] ints, int[] merge, int start, int end) 
{
    if (start >= end) return;

    int mid = (end + start) >> 1;

    mergeSort(ints, merge, start, mid);
    mergeSort(ints, merge, mid + 1, end);

    merge(ints, merge, start, end, mid);

}

private void merge(int[] a, int[] merge, int start, int end,int mid) 
{
    int i = start;
    int j = mid+1;
    int pos = start;
    while( i <= mid || j <= end ){
        if( i > mid ){
            while( j <= end ) merge[pos++] = a[j++];
            break;
        }

        if( j > end ){
            while( i <= mid ) merge[pos++] = a[i++];
            break;
        }

        merge[pos++] = a[i] >= a[j] ? a[j++] : a[i++];
    }

    for (pos = start; pos <= end; pos++)
        a[pos] = merge[pos];

}
